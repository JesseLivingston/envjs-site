{
    "guides": [
        {
            "$id": "table-of-contents-00",
            "page": "running|walking|crawling",
            "description": "TODO",
            "name": "table-of-contents",
            "deprecated": "",
            "examples": "",
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "running-00-intro",
            "page": "running",
            "description": "     <p>            env.rhino.js can be run either with a \"generic\" version of the Rhino            library (js.jar), or with the repackaged/extended version of Rhino            supplied with env.js (env-js.jar).  If your application uses multiple            windows, frames, or iframes, or if it depends on precise adherence to            JavaScript object scoping in event handlers, you will have to use            env-js.jar.  Simple applications may be able to run with the generic            version of Rhino.        </p>        <p>            The command line used for testing env.js can be found in build.xml,            although the general form is:<br/><br/>            <code> java -jar [jar file] [javascript file] </code><br/><br/>            Where \"jar file\" is either \"dist/env-js.jar\", \"rhino/js.jar\", or your            local path to a different version of the Rhino js.jar file.  The            \"javascript file\" is the path to the JavaScript you wish to execute.        </p>",
            "name": "intro",
            "deprecated": "",
            "examples": "",
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "running-01-rhino",
            "page": "running",
            "description": "    <p>        When running with generic rhino, you                 will only need the latest rhino,        (the rhino bundled with                 java 1.6 is not recent enough).  You will        also need to write                 a javascript file that is responsible loading        env.rhino.js,                 setting available options if any, and finally setting window.location                 <code>window.location<br/>        <br/>                        <pre class='box'>            env-js $ java -jar rhino/js.jar                </pre>                <br/>        <br/>        You should then see the javascript prompt...                 and you are ready to load        env.rhino.js.    </p>                    <p>       <strong style='color:red'>Warning...</strong> Envjs will                 not automatically       load and run the external javascript                 unless the script tags have the attribute                       <code>type='text/envjs', but it will attempt to run embedded                 and inline       script.  To enable all external javascript files                 you only have to tell Envjs       to do so, however <em>remember                 that all javascript executed will have       read/write access to                 your file system via ajax!</em>    </p>    <p>                       <strong>Known limitations:</strong> If the local or remote html                 file       uses frames and you are executing javascript inside the                 frames,       you will need to use the bundled env-js.jar instead                 of       the vanilla rhino (see below).    </p>",
            "name": "rhino",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "running-02-frames",
            "page": "running",
            "description": "    <p>        If your html application makes use of frames or iframes you will need        to use the conveniently rebundled rhino jar, <strong>dist/env-js.jar</strong>.        This simply enables and provides scope management routines to Envjs that        are otherwise transparent to you as an end user.                <pre class='box'>            env-js $ java -jar dist/env-js.jar                </pre>                You should then see the javascript prompt... and you are ready to load        env.rhino.js.    </p>",
            "name": "frames",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": "1.1.rc2",
            "deleted": ""
        },
        {
            "$id": "running-03-console",
            "page": "running",
            "description": "    <p>        If you are familiar with the rhino console, you probably know it's        a bit coarse around the edges, as back arrow, delete, up arrow, etc.        only give you ugly characters added to the end of the line (ugh).    </p>    <p>       To help make the console experience feel much more like the firebug       console experience, we have prebundled        <a href='http://jline.sourceforge.net/' target='_new'>JLine</a>       with env-js.jar.  You can still use it with plain old rhino by simply       appending it to your classpath.               <pre class='box'>            env-js $ java -cp dist/env-js.jar         jline.ConsoleRunner org.mozilla.javascript.tools.envjs.Main                </pre>                   <strong>          If you are at home in the firebug console in your browser,           you are ready load Envjs and feel right at home here!       </strong>    </p>",
            "name": "console",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "running-04-embed",
            "page": "running",
            "description": "    <p>        Many users have embedded Envjs as part of larger application frameworks        running with Rhino.  These practices are not currently well documented        or broadly uniform so we only mention them in passing here.    </p>    <p>        If you are interested in embedding Envjs with Rhino in a larger        application, please post to our support list and we will try to help        address your specific requirements to help you get started!    </p>",
            "name": "embed",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "walking-load",
            "page": "walking",
            "description": "<p>\n  Load the proper env.js file for your platform. \n        (Currently only rhino is supported, though our goal\n        is to support arbitrary javascript engines.)\n</p>",
            "name": "load",
            "deprecated": "",
            "examples": [
                "  <pre class='box'>\n    load('env.rhino.js'); //if in a Rhino script\n  </pre>"
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "walking-configure",
            "page": "walking",
            "description": "<p>\n  Optionally you can turn on/off settings by passing an options object. \n        In this example we enable loading and execution of external javascript\n        files with the\n  <code>scriptTypes\n  setting and enable DEBUG logging\n        levels.\n</p>",
            "name": "configure",
            "deprecated": "",
            "examples": [
                "  <pre class='box'>\n    Envjs({\n        logLevel: Envjs.DEBUG,\n        scriptTypes: {\n           'text/javascript': true\n        }\n    });\n  </pre>"
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "walking-go",
            "page": "walking",
            "description": "<p>\n  Tell env.js to load an HTML file that it should model:\n  <pre class='box'>\n    \n    window.location = 'some/file.html';\n  </pre>\n</p>\n<p>\n  This can be accomplished equivalently with\n  <pre class='box'>\n    \n    Envjs('some/file.html');\n  </pre>\n</p>\n<p>\n  The HTML application does not need to be local!\n  <pre class='box'>\n    \n    window.location = 'http://example.com/some/file.html';\n  </pre>\n</p>\n<p>\n  or equivalently you can take care of settings and location using\n       a convience method.\n  <pre class='box'>\n    \n    Envjs('some/file.html', {\n        logLevel: Envjs.DEBUG,\n        scriptTypes: {\n           'text/javascript': true\n        }\n    });\n  </pre>\n</p>",
            "name": "go",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "crawling-hooks",
            "page": "crawling",
            "description": "<p>Most javascript libraries provide a collection of unit tests that\n        run in the browser, and with a little tweeking Envjs can run these\n        tests in a 'headless' browser.  We use this internally as part of our\n        framework measurement for how well we are emulating the client-side\n        environment.</p>\n<p>\n  In this example we provide a use case of how to run the jQuery QUnit\n       tests after checking out the latest jquery source code.  This entire \n       example can be run with Envjs by executing the following command.\n  <pre class='box'>\n    \n    env-js $ bin/test-jquery.sh\n  </pre>\n</p>\n<p>\n  Aside from doing a little bash scripting magic to svn up, and copying\n       env.rhino.js and env-js.jar, Envjs doesn't do anything to modify the \n       actual html application that runs the jQuery QUnit tests.  Instead we use \n       hooks as follows:\n  <pre class='box'>\n    \nload('build/runtest/env.js');\n\n(function($env){\n    \n    $env('test/index.html', {\n        //let it load the script from the html\n        scriptTypes: {\n            'text/javascript'   :true\n        },\n        //afterScriptLoad is a powerful hook to let you\n        //modify globals or methods so Envjs can 'listen'\n        //to the scripts as they run\n        afterScriptLoad:{\n            'qunit/testrunner.js': function(){\n                //hook into qunit.log so we can get\n                //updates on the console about scripts\n                //as they run\n                var count = 0;\n                QUnit.log = function(result, message){\n                    $env.log('(' + (count++) + ')[' + \n                        ((!!result)?'PASS':'FAIL')+'] '+message);\n                };\n                //hook into qunit.done\n                QUnit.done = function(pass, fail){\n                    //when the tests are done we write out the\n                    //resulting dom to a local file so we can see the \n                    //tests results as reported by qunit\n                    $env.warn('Writing Results to File');\n                    //we dont want the scripts to run again when we \n                    //open the file so we change the script type\n                    jQuery('script').each(function(){\n                        this.type = 'text/envjs';\n                    });\n                    $env.writeToFile(\n                        document.documentElement.xml, \n                        $env.location('jqenv-'+Date.now()+'.html')\n                    );\n                };\n                \n                //modify some globals already defined by qunit\n                \n                \n                //jquery to run ajax tests locally\n                isLocal = false;\n                \n                //wrap qunit start and stop so we can prevent\n                //the tests from locking up if one throws an error\n                //while stop has been called\n                var unsafeStop = stop,\n                    unsafeStart = start,\n                    isStopped = null;\n                    \n                stop = function(){\n                    if(isStopped === null || !isStopped === false){\n                        $env.log('PAUSING QUNIT');\n                        isStopped = true;\n                        unsafeStop(arguments);\n                    }\n                };\n                start = function(){\n                    if(isStopped === null || isStopped === true ){\n                        $env.log('RESTARTING QUNIT');\n                        isStopped = false;\n                        unsafeStart(arguments);\n                    }\n                };\n                \n                //we know some ajax calls will fail becuase\n                //we are not running against a running server\n                //for php files\n                var handleError = jQuery.handleError;\n                jQuery.handleError = function(){\n                    ok(false, 'Ajax may have failed while running locally');\n                    try{\n                        handleError(arguments);\n                    }catch(e){}\n                    //allow tests to gracefully continue\n                    start();\n                };\n                \n                //allow unanticipated xhr error with no ajax.handleError \n                //callback (eg jQuery.getScript) to exit gracefully\n                $env.onInterrupt = function(){\n                    $env.info('thread interupt: gracefully continuing test');\n                    start();\n                };\n                $env.onScriptLoadError = function(script){\n                    Envjs.error('failed to load script \n'+script.text);    \n                    ok(false, 'Ajax may have failed to load '+\n                       'correct script while running locally');\n                    //allow tests to gracefully continue\n                    start();\n                };\n            }\n        }\n    });\n    \n})(Envjs);\n  </pre>\n</p>",
            "name": "hooks",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "crawling-scripting",
            "page": "crawling",
            "description": "<p>\n  You can also simply load the javascript libraries you want\n       to use and then script away just like you would in a browser. This\n       example shows how to use jquery to check you web pages for broken\n       links and could easy be integrated into a continous testing process.\n  <pre class='box'>\n    \n    //load libraries\n    load('env.rhino.js');\n    load('jquery-1.3.2.js');\n    \n    //configure settings\n    Envjs({\n       logLevel:Envjs.DEBUG\n    });\n    \n    //pick a html app to load\n    window.location = 'http://test.example.com/some/file.html';\n    \n    //script away\n    $('a').each(function(){\n       //check all the non-local links\n       var url = $(this).attr('href'); \n       if(!url.match('#')){\n           var _this = this;\n           $.ajax({\n              'type':'GET',\n              'url':url,\n              'async':false,\n              'success':function(){\n                 Envjs.debug('url was ok : '+url);\n              },\n              'error': function(){\n                 Envjs.error('url was broken! : '+url);\n              }\n           });\n       }\n    });\n  </pre>\n</p>\n<p>\n  Of course other JavaScript frameworks have their own\n        methods of setup, but the general pattern is:\n  <pre class='box'>\n    \n    // load env.js\n    // configure Envjs\n    // set window.location\n    // load and run your script\n  </pre>\n</p>",
            "name": "scripting",
            "deprecated": "",
            "examples": [
                ""
            ],
            "deleted": ""
        }
    ],
    "apis": [
        {
            "$id": "options-scriptTypes",
            "page": "options",
            "description": "<p>\n  <strong>Sets the script types that Envjs will load and run as part\n            of the page loading process.</strong>\n  <br/>\n  <span style='color:red;'>Envjs will not load external javascript by default.  Please be aware\n          of the security implications before you allow arbitrary scripts\n          to run on your system.</span>\n  <br/>\n  <em>(can be used to run some scripts in a server environment, or for\n           more general multi-pass treatments of documents)</em>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>\n    <br/>\n    'text/javascript'   :false,\n    <br/>\n    'text/envjs'        :true\n  </span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        $env.scriptTypes : {\n            'text/javascript'   :true\n        }\n    });\n    //this will now load and run all external javascript\n    //emulating browser behavior\n    window.location = 'http://www.w3c.org/';\n    </pre>",
            "name": "scriptTypes",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-logLevel",
            "page": "options",
            "description": "<p>\n  <strong>Sets the verbosity of the log messages produced by Envjs</strong>\n  <br/>\n  <span>Allowed values are Envjs.NONE, Envjs.ERROR, Envjs.WARN,\n            Envjs.INFO, and Envjs.DEBUG</span>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>Envjs.INFO</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        logLevel:Envjs.DEBUG\n    });\n    //you should see rather verbose logging in the console\n    //as the document loads.\n    window.location = 'http://www.w3c.org';\n    </pre>",
            "name": "logLevel",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-appCodeName",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets the value returned for\n    <code>window.navigator.appCodeName\n  </strong>\n  <br/>\n  <span>For example, in Firefox this is 'Mozilla'.</span>\n  <br/>\n  <em>(can be used to emulate different browsers)</em>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>'Envjs'</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        appCodeName:'Mozilla'\n    });\n    \n    window.location = 'http://localhost:8080/navigator.html'\n    //returns 'Mozilla'\n    window.navigator.appCodeName;\n        </pre>",
            "name": "appCodeName",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-appName",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets the value returned for\n    <code>window.navigator.appName\n  </strong>\n  <br/>\n  <span>in Firefox this is 'Gecko/20070309 Firefox/2.0.0.3'</span>\n  <br/>\n  <em>(can be used to emulate different browsers)</em>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>'Resig/20070309 BirdDog/0.0.0.1'</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        appCodeName:'Gecko/20070309 Firefox/2.0.0.3'\n    });\n    \n    window.location = 'http://localhost:8080/navigator.html'\n    //returns 'Gecko/20070309 Firefox/2.0.0.3'\n    window.navigator.appCodeName;\n    </pre>",
            "name": "appName",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-tmpdir",
            "page": "options",
            "description": "<p>\n  <strong>Sets the directory Envjs will use to write temporary source\n            files for script tags with javascript inline.  This is \n            required for the rhino debugger and will likely be deprecated\n            in the future unless explicitly using a debugger.</strong>\n  <br/>\n  <span>This is analagous to the process Firebug uses to provide the \n          ability to see locally 'eval'uated script.</span>\n  <br/>\n  <em>(default implementation is rhino/java)</em>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>java.lang.System.getProperty('java.io.tmpdir')</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        tmpdir:'/opt/tmp'\n    });\n    //you will find files loaded locally in \n    ///opt/tmp (if it exists! else ?)\n    //though envjs will attempt to delete them \n    //on shutdown of the jvm\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "tmpdir",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-os_name",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.appVersion\n  </strong>\n  <br/>\n  <span>in Firefox on OSX this is '5.0 (Macintosh; en-US)'</span>\n  <br/>\n  <em>(can be used to emulate different os)</em>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>java.lang.System.getProperty('os.name')</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        os_name:'Win 98'\n    });\n    //Not sure what the spectrum of values might be. \n    //If you do, please let us know!\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "os_name",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-os_arch",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.platform\n  </strong>\n  <br/>\n  <span>in Firefox on OSX this is 'MacIntel'</span>\n  <br/>\n  <em>(can be used to emulate different os arch)</em>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>java.lang.System.getProperty('os.arch')</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        os_arch:'Pentium II (386)'\n    });\n    //Not sure what the spectrum of values might be. \n    //If you do, please let us know!\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "os_arch",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-os_version",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.userAgent\n  </strong>\n  <br/>\n  <span>in Firefox on OSX this is \n            'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2'</span>\n  <br/>\n  <em>(can be used to emulate different os)</em>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>java.lang.System.getProperty('os.version')</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        os_name:'Intel Mac OS X 10.1'\n    });\n    //Not sure what the spectrum of values might be. \n    //If you do, please let us know!\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "os_version",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-lang",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.userAgent\n  </strong>\n  <br/>\n  <span>in Firefox on OSX this is \n            'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2'</span>\n  <br/>\n  <em>(can be used to emulate different default lang)</em>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>java.lang.System.getProperty('user.lang')</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        os_name:'fr'\n    });\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "lang",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-platform",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.platform\n  </strong>\n  <br/>\n  <span>in Firefox on OSX this is \n            'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2'</span>\n  <br/>\n  <em>(can be used to emulate different os)</em>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>'Rhino'</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        platform:'MacIntel'\n    });\n    //Not sure what the spectrum of values might be. \n    //If you do, please let us know!\n    window.location = 'http://localhost:8080/navigator.html'\n    </pre>",
            "name": "platform",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "options-javaEnabled",
            "page": "options",
            "description": "<p>\n  <strong>\n    Sets value which is returned as part of\n    <code>window.navigator.javaEnabled\n  </strong>\n  <br/>\n  <span>in env.rhino.js this is set to true, though we may need to\n          give this some deeper consideration.</span>\n  <br/>\n  <strong>default (rhino):</strong>\n  <span class='api-default-value'>true</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        javaEnabled:false\n    });\n    //Not sure why you would want to do this\n    //returns false\n    window.navigator.javaEnabled;\n    </pre>",
            "name": "javaEnabled",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "hooks-beforeScriptLoad",
            "page": "hooks",
            "description": "<p>\n  <strong>Uses regular expression matches on script src attributes\n            and allows you to specify a function to call before the\n            matching script is loaded.</strong>\n  <br/>\n  <span>Very useful for setting global values that will affect the \n            setting of the script to be loaded next.</span>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>none</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        TODO\n    });\n    //Haven't found a real life use-case but I'm sure someone will\n    </pre>",
            "name": "beforeScriptLoad",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "hooks-afterScriptLoad",
            "page": "hooks",
            "description": "<p>\n  <strong>Uses regular expression matches on script src attributes\n            and allows you to specify a function to call immediately \n            after the matching script is loaded.</strong>\n  <br/>\n  <span>Very useful for modifying the previously loaded script,\n            for example, to attach a logger to a unit testing framework,\n            or hook some data mining up around existing functions.</span>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>none</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        afterScriptLoad:{\n            'qunit/testrunner.js': function(){\n                //hook into qunit.log\n                var count = 0;\n                QUnit.log = function(result, message){\n                    Envjs.log('('+(count++)+')['+ \n                        ((!!result)?'PASS':'FAIL')+']'+message);\n                };\n            }\n        }\n    });\n    //We'll now get messages from QUnit at the console!\n    window.location = 'jquery/tests/index.html'\n    </pre>",
            "name": "afterScriptLoad",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "hooks-onScriptLoadError",
            "page": "hooks",
            "description": "<p>\n  <strong>Allows the user to define a single handler to be called if\n            a script tag throws an error when being evaluated for\n            the first time.</strong>\n  <br/>\n  <span>This is a global callback, not an event patterns so defining\n            it twice overrides the previous callback.</span>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>empty function</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        Envjs.onScriptLoadError : function(script){\n            Envjs.error('failed to load script \n'+script.text);    \n            ok(false, 'JSONP may have failed to '+\n                 'load correct script while running locally');\n            //allow tests to gracefully continue\n            start();\n        }\n    });\n    //we use this here to safely continue running the scripts\n    //even though we expect this script load to fail\n    </pre>",
            "name": "onScriptLoadError",
            "deprecated": true,
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "hooks-onInterrupt",
            "page": "hooks",
            "description": "<p>\n  <strong>Allows the user to define a single handler to be called when\n            the Envjs.timer routine is interupted.  Note that this is \n            expected in most cases, such as setTimeout, and setInterval,\n            and even for Ajax, so remember onInterupt does not mean\n            an error necessarily occured.</strong>\n  <br/>\n  <span>This is a global callback, not an event patterns so defining\n            it twice overrides the previous callback.</span>\n  <br/>\n  <strong>default:</strong>\n  <span class='api-default-value'>empty function</span>\n</p>\n<pre class='box'>\n\n    Envjs({\n        //allow unanticipated xhr error with no ajax.handleError \n        //callback (eg jQuery.getScript) to exit gracefully\n        Envjs.onInterrupt = function(){\n            Envjs.info('thread interupt: gracefully continuing test');\n            start();\n        };\n    });\n    </pre>",
            "name": "onInterrupt",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-log",
            "page": "platform",
            "description": "<p>\n  <strong>Allows the user to define a method to provide output. Expects\n            a string argument and returns nothing.</strong>\n  <br/>\n  <span>env.rhino.js provides an implementation that uses the global\n            Rhino print function.  If you prefer a different output\n            format or want to write logs to a file you can override this\n            function.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.log = function(string){\n       //do something with the string\n       return;\n    }\n    </pre>",
            "name": "log",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-location",
            "page": "platform",
            "description": "<p>\n  <strong>This function is used to resolve paths.</strong>\n  <br/>\n  <span>If it is detected that the first argument already contains \n            a protocol, eg file:, http:, or https:, the url is \n            simply returned.</span>\n  <br/>\n  <span>If the first argument 'path' does not contain a protocol, \n            and a second arg 'base' is detected, the first argument\n            is resolved relative to 'base' and the absolute url is returned</span>\n  <br/>\n  <span>If the first argument 'path' does not contain a protocol, \n            and a second arg is not detected, the first argument\n            is resolved relative to the window.location.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.location = function(path, base){\n       //create an absolute url including protocol\n       return absoluteUrl;\n    }\n    </pre>",
            "name": "location",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-loadScript",
            "page": "platform",
            "description": "<p>\n  <strong>This function is used to load and execute external javascript files.</strong>\n  <br/>\n  <span>In env.rhino.js, this function is the global Rhino load function.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.loadScript = function(scriptNode){\n       //load and execute the javascript from the url\n       return;\n    }\n    </pre>",
            "name": "loadScript",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-loadLocalScript",
            "page": "platform",
            "description": "<p>\n  <strong>This function contains the primary script loading strategy\n            for Envjs.</strong>\n  <br/>\n  <span>It also contains the implementation of document.write which is\n           different during initial document parsing.</span>\n  <br/>\n  <span>It also contains the hooks for Envjs.beforeScriptLoad\n            and Envjs.afterScriptLoad.</span>\n  <br/>\n  <span>If you need to customize the script loading strategy, simply \n           redefine this function.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.loadLocalScript = function(scriptElement, parser){\n       //load and execute the javascript from the url\n       return;\n    }\n    </pre>",
            "name": "loadLocalScript",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-timer",
            "page": "platform",
            "description": "<p>\n  <strong>This function implements the waiting strategy for functions\n            executed with setTimeout and setInterval.</strong>\n  <br/>\n  <span>It must synchronize the execution of the timed function\n           in the same scope at which setTimeout or setInterval was called.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.timer = function(fn, time){\n      //creates a thread, waits the specified durations,\n      //joins the thread and executes the specified function\n      //in a synchronized wrapper\n    }\n    </pre>",
            "name": "timer",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-runAsync",
            "page": "platform",
            "description": "<p>\n  <strong>This function implements asychronous execution of functions.</strong>\n  <br/>\n  <span>It is used primarily by the XMLHttpRequest object to make \n           network calls while scripts continue to run.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.runAsync = function(fn){\n      //creates a thread and executes the specified function\n      //in a synchronized wrapper\n    }\n    </pre>",
            "name": "runAsync",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-loadFrame",
            "page": "platform",
            "description": "<p>TODO</p>\n<pre class='box'>\n\n    Envjs({\n        TODO\n    });\n        //TODO\n    </pre>",
            "name": "loadFrame",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-proxy",
            "page": "platform",
            "description": "<p>TODO</p>\n<pre class='box'>\n\n    Envjs({\n        TODO\n    });\n        //TODO\n    </pre>",
            "name": "proxy",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-writeToFile",
            "page": "platform",
            "description": "<p>\n  <strong>Writes text to a file.</strong>\n  <br/>\n  <span>Used by the XMLHttpRequest when data is PUT to a local file.</span>\n  <br/>\n  <span>Useful to write resulting dom to a file after running\n           dhtml on a document.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.writeToFile = function(text, url){\n      dumps the text to the specified url (should be a local file path)\n    }\n    </pre>",
            "name": "writeToFile",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-writeToTempFile",
            "page": "platform",
            "description": "<p>\n  <strong>Writes text to a temporary file. The suffix parameter\n           allows idenification of the temporary files writen by Envjs.</strong>\n  <br/>\n  <span>Used prior to executing scripts embedded in html files so\n           they can be traced by debuggers.</span>\n  <br/>\n  <span>Envjs attempts to delete these files on exit.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.writeToTmpFile = function(text,suffix){\n      dumps the text to a temporary file\n    }\n    </pre>",
            "name": "writeToTempFile",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-deleteFile",
            "page": "platform",
            "description": "<p>\n  <strong>Deletes the file at the given url.</strong>\n  <br/>\n  <span>Used by XMLHttpRequest when a DELETE is called on a local file.</span>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.deleteFile = function(url){\n      //deletes the file at the given url\n    }\n    </pre>",
            "name": "deleteFile",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        },
        {
            "$id": "platform-connection",
            "page": "platform",
            "description": "<p>\n  <strong>Implements the details of making the connections for \n          XMLHttpRequest</strong>\n  <br/>\n</p>\n<pre class='box'>\n\n    Envjs.connection = function(xhr, responseHandler, data){\n      //makes a connection, posting or url encoding data, \n      //and finally calling the response handler\n    }\n        //TODO\n    </pre>",
            "name": "connection",
            "deprecated": "",
            "examples": [
                ""
            ],
            "version": [
                "1.0.x",
                "1.1.rc2",
                "1.2.11"
            ],
            "deleted": ""
        }
    ],
    "events": [
        {
            "$id": "jquery-conf-2009",
            "title": "jQuery Conf",
            "image": "images/logo_jquery_53x53.jpg",
            "description": "                <p>                    Justin Meyer will be covering JMVC which uses                    Envjs as part of his testing triage.                </p>",
            "url": "http://events.jquery.com/jquery-conference-2009/",
            "date": "Sept 13th, 2009",
            "location": "Microsoft Cambridge, Boston MA ",
            "deleted": ""
        }
    ],
    "news": [
        {
            "$id": "jquery-claypool-on-appengine",
            "title": "jQuery-Claypool on AppEngine",
            "description": "                <p>                    <img src='http://www.claypooljs.com/images/trac_claypool.gif'                         style='float:left;'                         width='150px'/>                    <a href='http://www.claypooljs.com/'>jquery-claypool</a>                    is a railable javascript application framework that runs                    on the client and, thanks to Envjs, the server.  This site                    is running on Google Apps Engine with jquery-claypool and                    Envjs!                </p>",
            "date": "09/01/2009",
            "deleted": ""
        },
        {
            "$id": "jmvc-testing-triage",
            "title": "JavascriptMVC",
            "description": "                <p>                    <img src='http://javascriptmvc.s3.amazonaws.com/jmvc/plugins/documentation/app/images/logo.png'                         style='float:left;'/>                    <a href='http://javascriptmvc.com/'>JavascriptMVC</a>                    is a Javascript MVC framework that uses Envjs as part of                    it's testing triage including in browser, Selenium, and                    headless testing with Envjs.                </p>",
            "date": "09/01/2009",
            "deleted": ""
        },
        {
            "$id": "blue-ridge-javascript-testing-rails-plugin",
            "title": "Blue Ridge Javascript Testing Rails Plugin",
            "description": "                <p>                    <img src='http://blog.thinkrelevance.com/assets/2009/6/29/blueridge.png'                         style='float:left;'                         width='200px'/>                    The <a href='http://www.blueridgejs.org/'>Blue Ridge</a>                    JavaScript Testing Rails Plugin adds support for                    command-line and in-browser JavaScript unit tests to your Rails app.                    It bundles several great tools (including env.js) together in a                    convention-over-configuration, Rails-like way.                </p>",
            "date": "09/01/2009",
            "deleted": ""
        }
    ],
    "distributables": [
        {
            "$id": "env.rhino.1.0.x.js",
            "description": "<p>pure js implementation, just add rhino (no frames support)</p>",
            "url": "http://github.com/thatcher/env-js/raw/1.0.x/dist/env.rhino.js",
            "label": "env.rhino.js",
            "deleted": "",
            "release": "envjs-1.0.x"
        },
        {
            "$id": "env.frames.1.0.x.jar",
            "description": "<p>add to class path along with rhino for frames support</p>",
            "url": "http://github.com/thatcher/env-js/raw/1.0.x/dist/env.frames.jar",
            "label": "env.frames.jar",
            "deleted": "",
            "release": "envjs-1.0.x"
        },
        {
            "$id": "envjs.1.0.x.jar",
            "description": "            <p>                our convenient repackage of the latest rhino with envjs                frame support, html jtidy, and jline console support            </p>",
            "url": "http://github.com/thatcher/env-js/raw/1.0.x/dist/env-js.jar",
            "label": "env-js.jar",
            "deleted": "",
            "release": "envjs-1.0.x"
        },
        {
            "$id": "env.rhino.1.2.11.js",
            "description": "<p>pure js implementation, just add rhino</p>",
            "url": "http://github.com/thatcher/env-js/raw/1.2.11/dist/env.rhino.js",
            "label": "env.rhino.js",
            "deleted": "",
            "release": "envjs-1.2.11"
        }
    ],
    "releases": [
        {
            "$id": "envjs-1.0.x",
            "readme": "http://github.com/thatcher/env-js/raw/master/README",
            "description": "                <p>                    We are rapidly approaching our milestone of realizing                    a complete implementation of the core browser javascript                    apis, and finally rolling out release candidates.                    There are many notable improvements so please checkout                    the release notes.  We are also (finally) adding a                    docs section that will cover all the basic configurables,                    hooks, and samples you need to get rolling!                </p>",
            "zip": "http://github.com/thatcher/env-js/zipball/master",
            "notes": [
                "Support for frames and iframes!",
                "Improved error handling in XHR.",
                "Corrected several bugs in Javascript DOM",
                "Synchronized thread for window timers!",
                "1340+ tests pass in jQuery 1.3.2"
            ],
            "name": "Latest Official",
            "tar": "http://github.com/thatcher/env-js/tarball/master",
            "deleted": ""
        }
    ]
}